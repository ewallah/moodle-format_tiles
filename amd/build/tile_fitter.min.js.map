{"version":3,"sources":["../src/tile_fitter.js"],"names":["define","$","ajax","reOrgLocked","courseId","Selector","PAGE","TILE","TILEID","TILE_COLLAPSED","TILES","ACTIVITY","SPACER","SECTION_ID","OPEN_SECTION","SECTION_ZERO","CONTENT_SECTIONS","timeoutBeforeResizeAjax","resizeTilesDivWidth","winWidth","window","width","dfd","Deferred","tiles","TILE_WIDTHS","standard","min","mobileMin","tilesParentWidth","parent","innerWidth","firstTile","find","oneTileWidth","tileMargin","resizeWidth","maxPossibleTilesPerRow","Math","floor","tileCount","not","length","reject","range","start","end","res","push","rowMaxCount","rowMinCount","possibleRowCounts","reverse","lastRowRemainderTiles","map","num","indexOf","max","apply","existingWidth","parseInt","css","replace","abs","resolve","animate","setTimeout","clearTimeout","call","methodname","args","courseid","err","promise","organiser","getContentSectionPositions","rows","currentSectionId","previousTile","openSections","maxTilesPerRow","thisRowCount","allTiles","children","each","index","tile","attr","position","top","sections","displayAfterTile","moveContentSectionsToPlaces","positionData","callbacks","forEach","row","contentSection","detach","insertAfter","last","func","runReOrg","delayBefore","action","removeClass","setListeners","click","unHideTiles","opacity","hasClass","fadeOut","remove","init","courseIdInit","sectionOpen","fitTilesToWidth","isEditing","document","ready","done","organiseAndRevealTiles","fail"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript Module to handle fitting tiles to screen.\n * Called when in non editing mode.\n *\n * @module tile_fitter\n * @package course/format\n * @subpackage tiles\n * @copyright 2019 David Watson {@link http://evolutioncode.uk}\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.3\n */\n\n/* global setTimeout, document, window */\n/* eslint space-before-function-paren: 0 */\n\ndefine([\"jquery\", \"core/ajax\"], function ($, ajax) {\n    \"use strict\";\n\n    var reOrgLocked = false;\n    var courseId;\n    var Selector = {\n        PAGE: \"#page\",\n        TILE: \".tile\",\n        TILEID: \"#tile-\",\n        TILE_COLLAPSED: \".tile-collapsed\",\n        TILES: \".format-tiles.jsenabled ul.tiles\",\n        ACTIVITY: \".activity\",\n        SPACER: \".spacer\",\n        SECTION_ID: \"#section-\",\n        OPEN_SECTION: \".moveablesection:visible\",\n        SECTION_ZERO: \"#section-0\",\n        CONTENT_SECTIONS: \".moveablesection\"\n    };\n\n    // Used to store a delayed AJAX request so we can replace it if user sets again within one second or two.\n    var timeoutBeforeResizeAjax = null;\n\n    /**\n     * If we have a single tile on the last row it looks odd.\n     * We might want to shrink the tile window down a little to even it out.\n     * So we work out how many per row would be optimal, and shrink the window accordingly.\n     * @see format_tiles_width_template_data() in locallib.php for more information.\n     * @return {Promise}\n     */\n    var resizeTilesDivWidth = function() {\n        var winWidth = $(window).width();\n        // Create a new Deferred.\n        var dfd = new $.Deferred();\n        var tiles = $(Selector.TILES);\n        var TILE_WIDTHS = {\n            standard: 260,\n            min: 225,\n            mobileMin: 160\n        };\n        try {\n            var tilesParentWidth = tiles.parent().innerWidth();\n            var firstTile = $(tiles.find(Selector.TILE)[0]);\n            // Get the width of one tile.\n            var oneTileWidth = firstTile.width()\n                ? firstTile.width()\n                : TILE_WIDTHS.standard; // Default standard as min tile width if we can't get the actual width.\n            var tileMargin = 14; // Margin 7px either side.\n            oneTileWidth = oneTileWidth + tileMargin;\n            var resizeWidth = \"inherit\";\n            // Skip if window is only 2 or smaller than 2 tiles wide already.\n            // This ensures that we don't crush the tiles into the centre (i.e. we use at least x% of width).\n            var maxPossibleTilesPerRow = Math.floor(tilesParentWidth / TILE_WIDTHS.min);\n            var tileCount = ($(Selector.TILE).not(Selector.SPACER).length); // How many tiles in this course.\n            if (tilesParentWidth < TILE_WIDTHS.mobileMin * 2) {\n                // Only space for one tile - don't resize to save space.\n                dfd.reject(\"Too narrow to resize\");\n            } else if (tileCount <= 3 && tilesParentWidth > tileCount * TILE_WIDTHS.mobileMin) {\n                resizeWidth = TILE_WIDTHS.standard * 4;\n            } else if (tilesParentWidth < TILE_WIDTHS.min * 3) {\n                resizeWidth = (TILE_WIDTHS.standard - tileMargin) * 2;\n            } else if (maxPossibleTilesPerRow < 4) {\n                // Here we set the max width to the space we have available, so that tiles are centred.\n                resizeWidth = TILE_WIDTHS.standard * maxPossibleTilesPerRow;\n            } else {\n                // Make a range of numbers in an array.  e.g. range(2,5) = [2, 3, 4, 5].\n                var range = function (start, end) {\n                    var res = [];\n                    for (start; start <= end; start += 1) {\n                        res.push(start);\n                    }\n                    return res;\n                };\n\n                // How many tiles per row could we fit on the screen, if we put in as many as possible?\n                var rowMaxCount = Math.min(\n                    Math.floor(tilesParentWidth / oneTileWidth),\n                    tileCount\n                );\n                // If we'd have a single row of more than 5 tiles, split it into 2.\n                if (tileCount <= rowMaxCount && tileCount > 5) {\n                    resizeWidth = (Math.floor(tileCount / 2) + 1) * oneTileWidth;\n                } else if (rowMaxCount > 3 && tileCount / rowMaxCount <= 3) {\n                    // If we can fit 3 tiles per row max, we don't restrict to 2, as this makes content window unnecessarily small.\n                    // Also if we have 3 or more rows (3 or more) we don't bother restricting as the last row is not so noticeable.\n\n                    // How many tiles per row do we want as a minimum (in order to occupy a reasonable amount of width)?\n                    var rowMinCount = Math.floor(tilesParentWidth / oneTileWidth);\n\n                    // What are the possibilities for tiles per row?  Then we can look at which we want.\n                    var possibleRowCounts = range(rowMinCount, rowMaxCount).reverse(); // Something like [6, 5, 4, 3].\n\n                    // For each possibility, how many tiles would that leave on the last row?\n                    var lastRowRemainderTiles = possibleRowCounts.map(function (num) {\n                        return tileCount % num;\n                    });\n                    if (lastRowRemainderTiles.indexOf(0) !== -1) {\n                        // We have the option of having a *full* last row so take that.\n                        resizeWidth = oneTileWidth * possibleRowCounts[lastRowRemainderTiles.indexOf(0)];\n                    } else if (tileCount < rowMinCount) {\n                        resizeWidth = tileCount * oneTileWidth;\n                    } else {\n                        // Otherwise make the last row as full as possible (few tiles on last row looks worse).\n                        resizeWidth = oneTileWidth * possibleRowCounts[lastRowRemainderTiles.indexOf(\n                            Math.max.apply(null, lastRowRemainderTiles)\n                        )];\n                    }\n                } else {\n                    // In these cases, we don't artificially narrow the view, but we do put a max width on of the existing width.\n                    // This is so that, when sections open under the tiles, they do not stick out with extra width beyond the tiles.\n                    // It also allows the auto margin to centre the tiles.\n                    resizeWidth = rowMaxCount * oneTileWidth;\n                }\n            }\n\n            // If we already have the desired width, nothing to do here so skip it.\n            var existingWidth = parseInt(tiles.css(\"max-width\").replace(\"px\", \"\"));\n            if (Math.abs(resizeWidth - existingWidth) < 100) {\n                dfd.resolve();\n            } else {\n                // We set session width at the server so that next time it is rendered with PHP, it has the correct width already.\n                var resizeTime = 500;\n                tiles.css(\"max-width\", winWidth).animate({\"max-width\": resizeWidth}, resizeTime, \"swing\",\n                    function() {\n                        setTimeout(function() {\n                            // Wait additional time before confirm resolved to allow resize to complete else re-org is too early.\n                            dfd.resolve();\n                        }, resizeTime + 100);\n                        $(Selector.CONTENT_SECTIONS).animate({\"max-width\": resizeWidth}, resizeTime, \"swing\");\n                    }\n                );\n            }\n\n            // If we already have scheduled AJAX request to set width, cancel it and replace it with a more up to date one.\n            // We need not set the width on the server very often - once every 3 seconds is plenty.\n            if (timeoutBeforeResizeAjax) {\n                clearTimeout(timeoutBeforeResizeAjax);\n            }\n            timeoutBeforeResizeAjax = setTimeout(function () {\n\n                ajax.call([{\n                    methodname: \"format_tiles_set_session_width\",\n                    args: {courseid: courseId, width: Math.floor(resizeWidth)}\n                }]);\n            }, 3000);\n        } catch (err) {\n            // Unset widths as something went wrong.\n            tiles.css(\"max-width\", winWidth).animate({\"max-width\": \"100%\"}, 500, \"swing\");\n            ajax.call([{\n                methodname: \"format_tiles_set_session_width\",\n                args: {courseid: courseId, width: 0}\n            }]);\n            dfd.reject(\"Failed to resize\");\n        }\n        return dfd.promise();\n    };\n\n    var organiser = {\n        /**\n         * Content sections need to be displayed after the row in which the tile to which they relate appears\n         * e.g. we have a row of tiles 1-3 and then after that we need to have the content divs which contain the\n         * related content.  As this depends on device window size, we calcuate this on page load and after window changes\n         * e.g. navbar button at side is pressed or browser window is resized\n         * @returns {Array} of rows, with the tile they need to be displayed after, and the sections in each row\n         */\n        getContentSectionPositions: function () {\n            var rows = [];\n            var currentSectionId;\n            var previousTile;\n            var openSections = $(Selector.OPEN_SECTION);\n            // Hide these for an instant while we do the calculations.\n            openSections.css(\"display\", \"none\");\n\n            var maxTilesPerRow = 1;\n            var thisRowCount = 0;\n            var allTiles = $(Selector.TILES).children(Selector.TILE).not(Selector.TILE_COLLAPSED).not(\".spacer\");\n            allTiles.each(function (index, tile) {\n                currentSectionId = $(tile).attr(\"data-section\");\n                var maxVerticalPositionDifference = 100;\n                if (currentSectionId) {\n                    if (index === 0) {\n                        // We are on the first tile, so append a row and add tile ID to it.\n                        thisRowCount = 1;\n                    } else if (Math.abs($(tile).position().top - $(previousTile).position().top) <= maxVerticalPositionDifference) {\n                        thisRowCount += 1;\n                        // We are on the same row as the previous tile.\n                        // maxVerticalPositionDifference is because tiles on same row may have different vertical positions.\n                        // E.g. if one of the is in a hover state.  If they are within 100 px max they must be on same row.\n                    } else {\n                        // On a new row.\n                        thisRowCount = 0;\n                    }\n                    if (thisRowCount > maxTilesPerRow) {\n                        maxTilesPerRow = thisRowCount;\n                    }\n                    previousTile = tile;\n                }\n            });\n            openSections.css(\"display\", \"block\");\n\n            // Now allocate rows of maxTilesPerRow each until we run out of tiles.\n            allTiles.each(function (index, tile) {\n                currentSectionId = $(tile).attr(\"data-section\");\n                if (rows.length === 0 || rows[rows.length - 1].sections.length >= maxTilesPerRow) {\n                    if (rows.length >= 1) {\n                        // Update the display after tag on previous row.\n                        rows[rows.length - 1].displayAfterTile =\n                            rows[rows.length - 1].sections[(rows[rows.length - 1].sections).length - 1];\n                    }\n                    // Start a new row.\n                    rows.push({\n                        displayAfterTile: \"\",\n                        sections: [currentSectionId]\n                    });\n                } else {\n                    rows[rows.length - 1].sections.push(currentSectionId);\n                }\n            });\n            rows[rows.length - 1].displayAfterTile =\n                rows[rows.length - 1].sections[(rows[rows.length - 1].sections).length - 1];\n            return rows;\n        },\n\n        /**\n         * Move content sections to appear under the correct tiles\n         * so that when a tile is clicked, they expand under it\n         * @param {Array} positionData\n         * @param {[function]} callbacks\n         */\n        moveContentSectionsToPlaces: function (positionData, callbacks) {\n            positionData.forEach(function (row) {\n                row.sections.forEach(function (contentSection) {\n                    if (row.displayAfterTile === positionData[positionData.length - 1].displayAfterTile) {\n                        $(Selector.SECTION_ID + contentSection).detach().insertAfter($(\"ul.tiles .tile\").last());\n                    } else {\n                        $(Selector.SECTION_ID + contentSection).detach().insertAfter($(\"#tile-\" + row.displayAfterTile));\n                    }\n                });\n            });\n            callbacks.forEach(function(func) {\n                if (typeof func === \"function\") {\n                    func();\n                }\n            });\n        },\n\n        /**\n         * Re-organise the sections so that they are in the correct order\n         * e.g. content section 3 is on the row below tile 3, so that\n         * when tile 3 is clicked, content section 3 opens directly under it\n         * @param {boolean} delayBefore should we delay before doing the re-org?\n         * @return {Promise}\n         */\n        runReOrg: function (delayBefore) {\n            // Create a new Deferred.\n            var dfd = new $.Deferred();\n            if (reOrgLocked === true) {\n                // Avoid repeated re-organisations - one at a time.\n                dfd.reject(\"Re-org locked\");\n            }\n            reOrgLocked = true;\n            var action = function() {\n                organiser.moveContentSectionsToPlaces(\n                    organiser.getContentSectionPositions(),\n                    [\n                        function() {\n                            $(\"body\").removeClass(\"modal-open\");\n                            dfd.resolve(\"Finished organising tiles\");\n                            reOrgLocked = false;\n                        }\n                    ]\n                );\n            };\n\n            if (delayBefore === true) {\n                // We want to allow a delay before we start the re-org. This allows any page animation going on to end.\n                setTimeout(function() {\n                    action();\n                    dfd.resolve(\"Re-org complete\");\n                }, 1000);\n            } else {\n                action();\n                dfd.resolve(\"Re-org complete\");\n            }\n            return dfd.promise();\n        }\n    };\n\n    var setListeners = function () {\n        // If theme uses docked blocks (e.g. more) then re-organise if they move.\n        $(\".block-hider-hide\").click(function () {\n            organiser.runReOrg(true);\n        });\n\n        $(\".block-hider-show\").click(function () {\n            organiser.runReOrg(true);\n        });\n\n        // If nav drawer is opened or closed, this rezises the window so need to re-initialise content divs.\n        $(\".navbar button[data-action=\\\"toggle-drawer\\\"]\").click(function () {\n            setTimeout(function() {\n                organiser.runReOrg(true);\n                resizeTilesDivWidth();\n            }, 600);\n\n        });\n    };\n\n    /**\n     * On initial page load, we need to unhide the tiles.  They will have been hidden from PHP if we are using JS.\n     * This is to cover the initial setting up of div width (i.e. allow us time to get screen width and set up).\n     */\n    var unHideTiles = function() {\n        $(Selector.TILES).animate({opacity: 1}, \"fast\");\n        $(Selector.TILE).not(Selector.SPACER).each(function(index, tile) {\n            tile = $(tile);\n            setTimeout(function() {\n                tile.animate(\n                    {opacity: tile.hasClass(\"tile-hidden\") || tile.hasClass(\"tile-restricted\") ? 0.5 : 1},\n                    \"fast\"\n                );\n            }, index * 10);\n        });\n        $(Selector.SECTION_ZERO).animate({opacity: 1}, \"fast\");\n        $(\"#page-loading-icon\").fadeOut(500).remove();\n    };\n\n    return {\n        init: function(courseIdInit, sectionOpen, fitTilesToWidth, isEditing) {\n            courseId = courseIdInit;\n            $(document).ready(function() {\n                setListeners();\n                if ($(Selector.TILES).css(\"opacity\") === \"1\") {\n                    organiser.runReOrg().done(function() {\n                        if (sectionOpen !== 0) {\n                            // Tiles are already visible so open the tile user was on previously (if any).\n                            $(Selector.TILEID + sectionOpen).click();\n                        }\n                    });\n                }\n\n                // When we first load the page we want to move the tile contents divs.\n                // Put them in the correct rows according to which row of tiles they relate to.\n                // Only then do we re-open the last section the user had open.\n                var organiseAndRevealTiles = function () {\n                    organiser.runReOrg().done(function() {\n                        if (sectionOpen !== 0 && $(Selector.OPEN_SECTION).length === 0) {\n                            // Now open the tile user was on previously (if any).\n                            $(Selector.TILEID + sectionOpen).click();\n                        }\n                        unHideTiles();\n                    });\n                };\n                if (fitTilesToWidth && !isEditing) {\n                    // If we have a single tile on the last row it looks odd so resize window.\n                    resizeTilesDivWidth().done(function() {\n                        organiseAndRevealTiles();\n                    }).fail(function() {\n                        // If resize is rejected e.g. as screen is to narrow e.g. mobile.\n                        organiseAndRevealTiles();\n                    });\n                } else {\n                    organiseAndRevealTiles();\n                }\n            });\n        },\n        resizeTilesDivWidth: function() {\n            return resizeTilesDivWidth();\n        },\n        runReOrg: function (delayBefore) {\n            return organiser.runReOrg(delayBefore);\n        }\n    };\n});"],"file":"tile_fitter.min.js"}