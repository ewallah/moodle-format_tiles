{"version":3,"sources":["../src/completion.js"],"names":["define","$","Templates","config","courseId","strings","dataKeys","cmid","numberComplete","numberOutOf","section","Selector","launchModuleModal","launchResourceModal","pageContent","regionMain","resourceModule","completeonevent","completeonview","activity","togglecompletion","tileId","Icon","completionYes","completionNo","noCompletionTrackingMods","progressTemplateData","numComplete","outOf","asPercent","data","tileid","numOutOf","showAsPercent","percent","Math","round","percentCircumf","percentOffset","isComplete","isSingleDigit","hastilephoto","hasClass","isOverall","changeProgressIndicators","sectionNum","tileProgressIndicator","progressChange","attr","newTileProgressValue","min","parseInt","overallProgressIndicator","newOverallProgressValue","render","done","html","replaceWith","tooltip","fadeOut","animate","opacity","toggleCompletionTiles","form","completionState","id","completionstate","fromajax","sesskey","url","wwwroot","post","returnData","status","completionImage","addClass","removeClass","fadeIn","closest","is","map","cls","join","require","storage","storeCourseContent","fail","Error","markAsAutoCompleteInUI","completionIcon","find","parent","completeauto","init","courseIdInit","strCompleteAuto","labelLikeCourseMods","document","ready","JSON","parse","on","e","preventDefault","currentTarget","length","clickedActivity"],"mappings":"AA2BAA,OAAM,2BAAC,CAAC,QAAD,CAAW,gBAAX,CAA6B,aAA7B,CAA4C,yBAA5C,CAAD,CAAyE,SAAUC,CAAV,CAAaC,CAAb,CAAwBC,CAAxB,CAAgC,CAC3G,aAD2G,GAGvGC,CAAAA,CAHuG,CAIvGC,CAAO,CAAG,EAJ6F,CAKvGC,CAAQ,CAAG,CACXC,IAAI,CAAE,WADK,CAEXC,cAAc,CAAE,kBAFL,CAGXC,WAAW,CAAE,eAHF,CAIXC,OAAO,CAAE,cAJE,CAL4F,CAWvGC,CAAQ,CAAG,CACXC,iBAAiB,CAAE,6CADR,CAEXC,mBAAmB,CAAE,+CAFV,CAGXC,WAAW,CAAE,eAHF,CAIXC,UAAU,CAAE,cAJD,CAKXC,cAAc,CAAE,oBALL,CAMXC,eAAe,CAAE,kBANN,CAOXC,cAAc,CAAE,iBAPL,CAQXC,QAAQ,CAAE,aARC,CASXT,OAAO,CAAE,iBATE,CAUXU,gBAAgB,CAAE,uBAVP,CAWXC,MAAM,CAAE,QAXG,CAX4F,CAyBvGC,CAAI,CAAG,CACPC,aAAa,CAAE,mBADR,CAEPC,YAAY,CAAE,mBAFP,CAzBgG,CAgCvGC,CAAwB,CAAG,EAhC4E,CA2CvGC,CAAoB,CAAG,SAAUL,CAAV,CAAkBM,CAAlB,CAA+BC,CAA/B,CAAsCC,CAAtC,CAAiD,CACxE,GAAIC,CAAAA,CAAI,CAAG,CACPC,MAAM,CAAEV,CADD,CAEPM,WAAW,CAAEA,CAFN,CAGPK,QAAQ,CAAEJ,CAHH,CAIPK,aAAa,CAAEJ,CAJR,CAKPK,OAAO,CAAEC,IAAI,CAACC,KAAL,CAAiC,GAAtB,EAAAT,CAAW,CAAGC,CAAd,CAAX,CALF,CAMPS,cAAc,CAAE,KANT,CAOPC,aAAa,CAAEH,IAAI,CAACC,KAAL,CAA6C,KAAlC,EAAC,CAACR,CAAK,CAAGD,CAAT,EAAwBC,CAAzB,CAAX,CAPR,CAQPW,UAAU,GARH,CASPC,aAAa,GATN,CAUPC,YAAY,CAAExC,CAAC,CAACU,CAAQ,CAACU,MAAT,CAAkBA,CAAnB,CAAD,CAA4BqB,QAA5B,CAAqC,WAArC,CAVP,CAAX,CAYA,GAAe,CAAX,GAAArB,CAAJ,CAAkB,CACdS,CAAI,CAACa,SAAL,CAAiB,CACpB,CAFD,IAEO,CACHb,CAAI,CAACa,SAAL,CAAiB,CACpB,CACD,GAAIhB,CAAW,EAAIC,CAAnB,CAA0B,CACtBE,CAAI,CAACS,UAAL,GACH,CACD,GAAmB,EAAf,CAAAT,CAAI,CAACI,OAAT,CAAuB,CACnBJ,CAAI,CAACU,aAAL,GACH,CACD,MAAOV,CAAAA,CACV,CApE0G,CA8EvGc,CAAwB,CAAG,SAASC,CAAT,CAAqBC,CAArB,CAA4CC,CAA5C,CAA4D,CAGvF,GAA4D,CAAxD,GAAAD,CAAqB,CAACE,IAAtB,CAA2B1C,CAAQ,CAACE,cAApC,GAA8E,CAAjB,CAAAuC,CAAjE,CAAqF,CAGjF,MACH,CAPsF,GASnFE,CAAAA,CAAoB,CAAGd,IAAI,CAACe,GAAL,CACvBC,QAAQ,CAACL,CAAqB,CAACE,IAAtB,CAA2B1C,CAAQ,CAACE,cAApC,CAAD,CAAR,CAAgEuC,CADzC,CAEvBD,CAAqB,CAACE,IAAtB,CAA2B1C,CAAQ,CAACG,WAApC,CAFuB,CAT4D,CAcnF2C,CAAwB,CAAGnD,CAAC,CAAC,iBAAD,CAduD,CAenFoD,CAAuB,CAAGlB,IAAI,CAACe,GAAL,CAC1BC,QAAQ,CAACC,CAAwB,CAACJ,IAAzB,CAA8B1C,CAAQ,CAACE,cAAvC,CAAD,CAAR,CAAmEuC,CADzC,CAE1BK,CAAwB,CAACJ,IAAzB,CAA8B1C,CAAQ,CAACG,WAAvC,CAF0B,CAfyD,CAqBvFP,CAAS,CAACoD,MAAV,CAAiB,uBAAjB,CAA0C5B,CAAoB,CAC1DmB,CAD0D,CAE1DI,CAF0D,CAG1DH,CAAqB,CAACE,IAAtB,CAA2B1C,CAAQ,CAACG,WAApC,CAH0D,CAI1DqC,CAAqB,CAACJ,QAAtB,CAA+B,SAA/B,CAJ0D,CAA9D,EAKGa,IALH,CAKQ,SAAUC,CAAV,CAAgB,CAEpBV,CAAqB,CAACW,WAAtB,CAAkCD,CAAlC,EACAvD,CAAC,CAAC,iBAAmB4C,CAApB,CAAD,CAAiCa,OAAjC,EACH,CATD,EAYAxD,CAAS,CAACoD,MAAV,CAAiB,uBAAjB,CAA0C5B,CAAoB,CAC1D,CAD0D,CAE1D2B,CAF0D,CAG1DD,CAAwB,CAACJ,IAAzB,CAA8B1C,CAAQ,CAACG,WAAvC,CAH0D,IAA9D,EAKG8C,IALH,CAKQ,SAAUC,CAAV,CAAgB,CACpBvD,CAAC,CAAC,iBAAD,CAAD,CAAqBwD,WAArB,CAAiCD,CAAjC,EAAuCG,OAAvC,CAA+C,CAA/C,EAAkDC,OAAlD,CAA0D,CAACC,OAAO,CAAE,CAAV,CAA1D,CAAwE,GAAxE,CACH,CAPD,CAQH,CAvH0G,CA+HvGC,CAAqB,CAAG,SAAUC,CAAV,CAAgB,IAGpCxD,CAAAA,CAAI,CAAGwD,CAAI,CAACf,IAAL,CAAU1C,CAAQ,CAACC,IAAnB,CAH6B,CAIpCyD,CAAe,CAAG/D,CAAC,CAAC,oBAAsBM,CAAvB,CAJiB,CAKpCuB,CAAI,CAAG,CACPmC,EAAE,CAAE1D,CADG,CAEP2D,eAAe,CAAEf,QAAQ,CAACa,CAAe,CAAChB,IAAhB,CAAqB,OAArB,CAAD,CAFlB,CAGPmB,QAAQ,CAAE,CAHH,CAIPC,OAAO,CAAEjE,CAAM,CAACiE,OAJT,CAL6B,CAWxCL,CAAI,CAACL,OAAL,CAAa,MAAb,EACA,GAAIW,CAAAA,CAAG,CAAGlE,CAAM,CAACmE,OAAP,CAAiB,8BAA3B,CACArE,CAAC,CAACsE,IAAF,CAAOF,CAAP,CAAYvC,CAAZ,CAAkB,SAAU0C,CAAV,CAAsBC,CAAtB,CAA8B,CAC5C,GAAe,SAAX,GAAAA,CAAM,EAAiC,IAAf,GAAAD,CAA5B,CAAiD,IACzCzB,CAAAA,CADyC,CAEzC2B,CAAe,CAAGzE,CAAC,CAAC,mBAAqBM,CAAtB,CAFsB,CAG7C,GAAsC,GAAlC,GAAAyD,CAAe,CAAChB,IAAhB,CAAqB,OAArB,CAAJ,CAA2C,CAIvC/C,CAAC,CAAC,4BAAD,CAAD,CAAgC+C,IAAhC,CAAqC,OAArC,CAA8C,CAA9C,EACAgB,CAAe,CAAChB,IAAhB,CAAqB,OAArB,CAA8B,CAA9B,EACAD,CAAc,EAAd,CACA2B,CAAe,CAACC,QAAhB,CAAyBrD,CAAI,CAACC,aAA9B,EAA6CqD,WAA7C,CAAyDtD,CAAI,CAACE,YAA9D,EACAvB,CAAC,CAAC,eAAiBM,CAAlB,CAAD,CAAyBsE,MAAzB,CAAgC,GAAhC,EAAqClB,OAArC,CAA6C,GAA7C,CACH,CATD,IASO,CAEH1D,CAAC,CAAC,4BAAD,CAAD,CAAgC+C,IAAhC,CAAqC,OAArC,CAA8C,CAA9C,EACAgB,CAAe,CAAChB,IAAhB,CAAqB,OAArB,CAA8B,CAA9B,EACAD,CAAc,CAAG,CAAC,CAAlB,CACA9C,CAAC,CAAC,eAAiBM,CAAlB,CAAD,CAAyBsE,MAAzB,CAAgC,GAAhC,EAAqClB,OAArC,CAA6C,GAA7C,EACAe,CAAe,CAACC,QAAhB,CAAyBrD,CAAI,CAACE,YAA9B,EAA4CoD,WAA5C,CAAwDtD,CAAI,CAACC,aAA7D,CACH,CACD,GAAI,CAACyC,CAAe,CAACc,OAAhB,CAAwBnE,CAAQ,CAACQ,QAAjC,EAA2C4D,EAA3C,CAEDtD,CAAwB,CAACuD,GAAzB,CAA6B,SAASC,CAAT,CAAc,CACvC,MAAO,IAAMA,CAChB,CAFD,EAEGC,IAFH,CAEQ,GAFR,CAFC,CAAL,CAKE,CAEEtC,CAAwB,CACpBmB,CAAI,CAACf,IAAL,CAAU1C,CAAQ,CAACI,OAAnB,CADoB,CAEpBT,CAAC,CAAC,iBAAmB8D,CAAI,CAACf,IAAL,CAAU1C,CAAQ,CAACI,OAAnB,CAApB,CAFmB,CAGpBqC,CAHoB,CAAxB,CAKAoC,OAAO,CAAC,CAAC,8BAAD,CAAD,CAAmC,SAASC,CAAT,CAAkB,CACxDA,CAAO,CAACC,kBAAR,CAA2BjF,CAA3B,CAAqC2D,CAAI,CAACf,IAAL,CAAU,cAAV,CAArC,CAAgE,EAAhE,CACH,CAFM,CAGV,CACJ,CACJ,CAtCD,EAuCKsC,IAvCL,CAuCU,UAAY,CACd,KAAM,IAAIC,CAAAA,KAAJ,CAAU,kDAAV,CACT,CAzCL,CA0CH,CAtL0G,CAiMvGC,CAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAASrE,CAAT,CAAmB,CAC5C,GAAI0B,CAAAA,CAAU,CAAG1B,CAAQ,CAAC2D,OAAT,CAAiBnE,CAAQ,CAACD,OAA1B,EAAmCsC,IAAnC,CAAwC,cAAxC,CAAjB,CACA,GAAI7B,CAAQ,CAACuB,QAAT,CAAkB,gBAAlB,CAAJ,CAAyC,IACjC+C,CAAAA,CAAc,CAAGtE,CAAQ,CAACuE,IAAT,CAAc,kBAAd,CADgB,CAEjCC,CAAM,CAAGF,CAAc,CAACX,OAAf,CAAuB,qBAAvB,CAFwB,CAGrC,GAAqC,GAAjC,GAAAa,CAAM,CAAC3C,IAAP,CAAY,eAAZ,GAAgF,GAAxC,GAAA2C,CAAM,CAAC3C,IAAP,CAAY,sBAAZ,CAA5C,CAAyF,CACrFyC,CAAc,CAACd,QAAf,CAAwBrD,CAAI,CAACC,aAA7B,EAA4CqD,WAA5C,CAAwDtD,CAAI,CAACE,YAA7D,EACAmE,CAAM,CAAC3C,IAAP,CAAY,sBAAZ,CAAoC,CAApC,EACA2C,CAAM,CAAC3C,IAAP,CAAY,qBAAZ,CAAmC3C,CAAO,CAACuF,YAA3C,EACAD,CAAM,CAACjC,OAAP,GACAd,CAAwB,CAACC,CAAD,CAAa5C,CAAC,CAAC,iBAAmB4C,CAApB,CAAd,CAA+C,CAA/C,CAC3B,CACJ,CAEDsC,OAAO,CAAC,CAAC,8BAAD,CAAD,CAAmC,SAAUC,CAAV,CAAmB,CACzDA,CAAO,CAACC,kBAAR,CAA2BjF,CAA3B,CAAqCyC,CAArC,CAAiD,EAAjD,CACH,CAFM,CAGV,CAlN0G,CAoN3G,MAAO,CACHgD,IAAI,CAAE,cAAUC,CAAV,CAAwBC,CAAxB,CAAyCC,CAAzC,CAA8D,CAChE5F,CAAQ,CAAG0F,CAAX,CACA7F,CAAC,CAACgG,QAAD,CAAD,CAAYC,KAAZ,CAAkB,UAAY,CAC1BzE,CAAwB,CAAG0E,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAA3B,CACA3F,CAAO,CAACuF,YAAR,CAAuBG,CAAvB,CAGA9F,CAAC,CAAC,MAAD,CAAD,CAAUoG,EAAV,CAAa,OAAb,CAAsB1F,CAAQ,CAACS,gBAA/B,CAAiD,SAAUkF,CAAV,CAAa,CAE1DA,CAAC,CAACC,cAAF,GACAzC,CAAqB,CAAC7D,CAAC,CAACqG,CAAC,CAACE,aAAH,CAAF,CACxB,CAJD,EAMA,GAAI1F,CAAAA,CAAW,CAAGb,CAAC,CAAC,eAAD,CAAnB,CACA,GAA2B,CAAvB,GAAAa,CAAW,CAAC2F,MAAhB,CAA8B,CAE1B3F,CAAW,CAAGb,CAAC,CAAC,cAAD,CAClB,CACDa,CAAW,CACNuF,EADL,CACQ,OADR,CACiB1F,CAAQ,CAACC,iBAAT,CAA6B,IAA7B,CAAoCD,CAAQ,CAACE,mBAD9D,CACmF,SAAUyF,CAAV,CAAa,CACxF,GAAII,CAAAA,CAAe,CAAGzG,CAAC,CAACqG,CAAC,CAACE,aAAH,CAAD,CAAmB1B,OAAnB,CAA2BnE,CAAQ,CAACQ,QAApC,CAAtB,CACA,GAAIuF,CAAe,CAAChE,QAAhB,CAAyB,gBAAzB,CAAJ,CAAgD,CAC5C8C,CAAsB,CAACkB,CAAD,CACzB,CACJ,CANL,EAOAzG,CAAC,CAACU,CAAQ,CAACG,WAAV,CAAD,CACKuF,EADL,CACQ,OADR,CACiB1F,CAAQ,CAACM,eAAT,CAA2B,IAA3B,CAAkCN,CAAQ,CAACO,cAD5D,CAC4E,SAAUoF,CAAV,CAAa,CAGjF,GAAIzD,CAAAA,CAAU,CAAG5C,CAAC,CAACqG,CAAC,CAACE,aAAH,CAAD,CAAmB1B,OAAnB,CAA2BnE,CAAQ,CAACD,OAApC,EAA6CsC,IAA7C,CAAkD,cAAlD,CAAjB,CACAmC,OAAO,CAAC,CAAC,8BAAD,CAAD,CAAmC,SAASC,CAAT,CAAkB,CACxDA,CAAO,CAACC,kBAAR,CAA2BjF,CAA3B,CAAqCyC,CAArC,CAAiD,EAAjD,CACH,CAFM,CAGV,CARL,CASH,CAhCD,CAiCH,CApCE,CAsCH2C,sBAAsB,CAAE,gCAASM,CAAT,CAAuB3E,CAAvB,CAAiC,CACrDf,CAAQ,CAAG0F,CAAX,CACAN,CAAsB,CAACrE,CAAD,CACzB,CAzCE,CA2CV,CA/PK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Load the format_tiles JavaScript for the course edit settings page /course/edit.php?id=xxx\n *\n * @module      format_tiles\n * @package     course/format\n * @subpackage  tiles\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/config\", \"format_tiles/completion\"], function ($, Templates, config) {\n    \"use strict\";\n\n    var courseId;\n    var strings = {};\n    var dataKeys = {\n        cmid: \"data-cmid\",\n        numberComplete: \"data-numcomplete\",\n        numberOutOf: \"data-numoutof\",\n        section: \"data-section\"\n    };\n    var Selector = {\n        launchModuleModal: '[data-action=\"launch-tiles-module-modal\"]',\n        launchResourceModal: '[data-action=\"launch-tiles-resource-modal\"]',\n        pageContent: \"#page-content\",\n        regionMain: \"#region-main\",\n        resourceModule: '.activity.resource',\n        completeonevent: \".completeonevent\",\n        completeonview: \".completeonview\",\n        activity: \"li.activity\",\n        section: \"li.section.main\",\n        togglecompletion: \"form.togglecompletion\",\n        tileId: \"#tile-\"\n    };\n\n    var Icon = {\n        completionYes: 'completion-icon-y',\n        completionNo: 'completion-icon-n'\n    };\n\n    // This will be populated on init with the items which we treat as labels.\n    // I.e. which we ignore for completion tracking.\n    var noCompletionTrackingMods = [];\n\n    /**\n     * When toggleCompletionTiles() makes an AJAX call it needs to send some data\n     * and this helps assemble the data\n     * @param {number} tileId which tile is this for\n     * @param {number} numComplete how many items has the user completed\n     * @param {number} outOf how many items are there to complete\n     * @param {boolean} asPercent should we show this as a percentage\n     * @returns {{}}\n     */\n    var progressTemplateData = function (tileId, numComplete, outOf, asPercent) {\n        var data = {\n            tileid: tileId,\n            numComplete: numComplete,\n            numOutOf: outOf,\n            showAsPercent: asPercent,\n            percent: Math.round(numComplete / outOf * 100),\n            percentCircumf: 106.8,\n            percentOffset: Math.round(((outOf - numComplete) / outOf) * 106.8),\n            isComplete: false,\n            isSingleDigit: false,\n            hastilephoto: $(Selector.tileId + tileId).hasClass(\"phototile\"),\n        };\n        if (tileId === 0) {\n            data.isOverall = 1;\n        } else {\n            data.isOverall = 0;\n        }\n        if (numComplete >= outOf) {\n            data.isComplete = true;\n        }\n        if (data.percent < 10) {\n            data.isSingleDigit = true;\n        }\n        return data;\n    };\n\n    /**\n     * When a progress change happens, e.g. an item is marked as complete or not, this fires.\n     * It changes the current tile's progress up or down by 1 according to the progressChange arg.\n     * It then does the same for the course's overall progress indicator.\n     * @param {int} sectionNum the number of this tile/section.\n     * @param {object} tileProgressIndicator the indicator for this tile\n     * @param {int} progressChange the amount we are changing e.g. +1 or -1\n     */\n    var changeProgressIndicators = function(sectionNum, tileProgressIndicator, progressChange) {\n        // TODO create a web service to get current value from server so we know it's correct.\n        // This can also handle updating the competion status instead of core below.\n        if (tileProgressIndicator.attr(dataKeys.numberComplete) === 0 && progressChange < 0) {\n            // If we are already at zero, do not reduce.  May happen rarely if user presses repeatedly.\n            // Will not cause a long term issue as will be resolved when user refreshes page.\n            return;\n        }\n        // Get the tile's new progress value.\n        var newTileProgressValue = Math.min(\n            parseInt(tileProgressIndicator.attr(dataKeys.numberComplete)) + progressChange,\n            tileProgressIndicator.attr(dataKeys.numberOutOf)\n        );\n        // Get the new overall progress value.\n        var overallProgressIndicator = $(\"#tileprogress-0\");\n        var newOverallProgressValue = Math.min(\n            parseInt(overallProgressIndicator.attr(dataKeys.numberComplete)) + progressChange,\n            overallProgressIndicator.attr(dataKeys.numberOutOf)\n        );\n\n        // Render and replace the progress indicator for *this tile*.\n        Templates.render(\"format_tiles/progress\", progressTemplateData(\n            sectionNum,\n            newTileProgressValue,\n            tileProgressIndicator.attr(dataKeys.numberOutOf),\n            tileProgressIndicator.hasClass(\"percent\")\n        )).done(function (html) {\n            // Need to repeat jquery selector as it is being replaced (replacwith).\n            tileProgressIndicator.replaceWith(html);\n            $(\"#tileprogress-\" + sectionNum).tooltip();\n        });\n\n        // Render and replace the *overall* progress indicator for the *whole course*.\n        Templates.render(\"format_tiles/progress\", progressTemplateData(\n            0,\n            newOverallProgressValue,\n            overallProgressIndicator.attr(dataKeys.numberOutOf),\n            true\n        )).done(function (html) {\n            $(\"#tileprogress-0\").replaceWith(html).fadeOut(0).animate({opacity: 1}, 500);\n        });\n    };\n\n    /**\n     * When a user clicks a completion tracking checkbox in this format, pass the click through to core\n     * This is partly based on the core functionality in completion.js but is included here as otherwise clicks on\n     * check boxes added dynamically after page load are not detected\n     * @param {object} form the form and check box\n     */\n    var toggleCompletionTiles = function (form) {\n        // Get the existing completion state for this completion form.\n        // For PDFs there will be two forms - one in the section and one within the modal - grab both with class.\n        var cmid = form.attr(dataKeys.cmid);\n        var completionState = $(\"#completionstate_\" + cmid);\n        var data = {\n            id: cmid,\n            completionstate: parseInt(completionState.attr(\"value\")),\n            fromajax: 1,\n            sesskey: config.sesskey\n        };\n        form.tooltip('hide');\n        var url = config.wwwroot + \"/course/togglecompletion.php\";\n        $.post(url, data, function (returnData, status) {\n            if (status === \"success\" && returnData === \"OK\") {\n                var progressChange;\n                var completionImage = $(\".completion_img_\" + cmid);\n                if (completionState.attr(\"value\") === \"1\") {\n                    // We have checked a progress box.\n                    // Change check box(es) to ticked,\n                    // And set the value(s) to zero so that if re-clicked, goes back to unchecked.\n                    $(\"#completion_dynamic_change\").attr(\"value\", 0);\n                    completionState.attr(\"value\", 0);\n                    progressChange = +1;\n                    completionImage.addClass(Icon.completionYes).removeClass(Icon.completionNo);\n                    $(\".complete-y-\" + cmid).fadeIn(200).fadeOut(1000);\n                } else {\n                    // We have un-checked a progress box.\n                    $(\"#completion_dynamic_change\").attr(\"value\", 1);\n                    completionState.attr(\"value\", 1);\n                    progressChange = -1;\n                    $(\".complete-n-\" + cmid).fadeIn(200).fadeOut(1000);\n                    completionImage.addClass(Icon.completionNo).removeClass(Icon.completionYes);\n                }\n                if (!completionState.closest(Selector.activity).is(\n                    // If the activity is not one of the mods we ignore for completion tracking e.g. label.\n                    noCompletionTrackingMods.map(function(cls) {\n                        return \".\" + cls;\n                    }).join(','))\n                ) {\n                    // We do not do this for labels, as they are not included in completion tracking.\n                    changeProgressIndicators(\n                        form.attr(dataKeys.section),\n                        $(\"#tileprogress-\" + form.attr(dataKeys.section)),\n                        progressChange\n                    );\n                    require([\"format_tiles/browser_storage\"], function(storage) {\n                        storage.storeCourseContent(courseId, form.attr(\"data-section\"), \"\");\n                    });\n                }\n            }\n        })\n            .fail(function () {\n                throw new Error(\"Failed to register completion change with server\");\n            });\n    };\n\n    /**\n     * When automatic completion tracking is being used, on modal launch we need to:\n     * - change the completion icon to complete.\n     * - recalculate the % complete for this tile and overall.\n     * We do not need to notify the server that the item is complete.\n     * This is because that is already covered when course_mod_modal calls log_mod_view().\n     * I.e. we just update the UI here because the data is handled elsewhere.\n     * @param {object} activity the activity which contains the completion icon\n     */\n    var markAsAutoCompleteInUI = function(activity) {\n        var sectionNum = activity.closest(Selector.section).attr('data-section');\n        if (activity.hasClass(\"completeonview\")) {\n            var completionIcon = activity.find('.completion-icon');\n            var parent = completionIcon.closest(\".completioncheckbox\");\n            if (parent.attr('data-ismanual') === \"0\" && parent.attr('data-completionstate') === \"0\") {\n                completionIcon.addClass(Icon.completionYes).removeClass(Icon.completionNo);\n                parent.attr('data-completionstate', 1);\n                parent.attr('data-original-title', strings.completeauto);\n                parent.tooltip();\n                changeProgressIndicators(sectionNum, $(\"#tileprogress-\" + sectionNum), 1);\n            }\n        }\n        // Even if it is not a \"complete on view\" activity, clear UI storage so that when user returns it is correct.\n        require([\"format_tiles/browser_storage\"], function (storage) {\n            storage.storeCourseContent(courseId, sectionNum, \"\");\n        });\n    };\n\n    return {\n        init: function (courseIdInit, strCompleteAuto, labelLikeCourseMods) {\n            courseId = courseIdInit;\n            $(document).ready(function () {\n                noCompletionTrackingMods = JSON.parse(labelLikeCourseMods);\n                strings.completeauto = strCompleteAuto;\n                // Trigger toggle completion event if check box is clicked.\n                // Included like this so that later dynamically added boxes are covered.\n                $(\"body\").on(\"click\", Selector.togglecompletion, function (e) {\n                    // Send the toggle to the database and change the displayed icon.\n                    e.preventDefault();\n                    toggleCompletionTiles($(e.currentTarget));\n                });\n\n                var pageContent = $(\"#page-content\");\n                if (pageContent.length === 0) {\n                    // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                    pageContent = $(\"#region-main\");\n                }\n                pageContent\n                    .on(\"click\", Selector.launchModuleModal + \", \" + Selector.launchResourceModal, function (e) {\n                        var clickedActivity = $(e.currentTarget).closest(Selector.activity);\n                        if (clickedActivity.hasClass(\"completeonview\")) {\n                            markAsAutoCompleteInUI(clickedActivity);\n                        }\n                    });\n                $(Selector.pageContent)\n                    .on(\"click\", Selector.completeonevent + \", \" + Selector.completeonview, function (e) {\n                        // For items which are auto complete on view or event, but don't launch in a modal e.g. Quiz.\n                        // We just clear the UI storage so that when user returns to this page, new completion state shows.\n                        var sectionNum = $(e.currentTarget).closest(Selector.section).attr('data-section');\n                        require([\"format_tiles/browser_storage\"], function(storage) {\n                            storage.storeCourseContent(courseId, sectionNum, \"\");\n                        });\n                    });\n            });\n        },\n        // Allow this to be accessed from elsewhere e.g. format_tiles module.\n        markAsAutoCompleteInUI: function(courseIdInit, activity) {\n            courseId = courseIdInit;\n            markAsAutoCompleteInUI(activity);\n        }\n    };\n});"],"file":"completion.min.js"}