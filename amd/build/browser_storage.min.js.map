{"version":3,"sources":["../src/browser_storage.js"],"names":["define","$","storageSetUp","courseId","userId","localStorageKeyElements","prefix","course","lastSection","content","lastUpdated","collapseSecZero","user","section","userChoicePrefix","MAX_SECTIONS_TO_STORE","encodeLastVistedSectionKeyName","encodeContentKeyName","sectionId","toString","encodeContentLastUpdatedKeyName","collapseSecZeroKey","isContentLastUpdatedKeyName","key","indexOf","substr","length","storeCourseContent","html","Error","Enabled","session","storageAllowed","sessionStorage","setItem","Math","round","Date","now","removeItem","err","require","log","debug","decodeLastUpdatedKey","splitKey","split","parseInt","title","cleanUp","contentDeleteMins","clearBrowserStorage","maxNumberToKeep","Object","keys","localStorage","filter","forEach","item","itemKey","params","staleTime","getItem","lastUpdateKeys","lastUpdateTimes","map","sort","cutOffTime","expiredKey","clearAllStorage","setLastVisitedSection","sectionNum","local","init","maxContentSectionsToStore","isEditing","storedContentDeleteMins","assumeDataStoreConsent","document","ready","click","pageContent","on","setTimeout","storageEnabledSession","storageEnabledLocal","storagestorageSetUperence","getLastVisitedSection","getCourseContent","getStoredContentAge","storedTime","setSecZeroCollapseStatus","status","getSecZeroCollapseStatus","cleanUpStorage"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript Module to handle browser storage for format_tiles for student view.\n * (Can also be used by staff when they view the student view).\n * Stores and retrieves course content and settings\n * e.g. which filter button do I have pressed\n *\n * @module browser_storage\n * @package course/format\n * @subpackage tiles\n * @copyright 2018 David Watson {@link http://evolutioncode.uk}\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since Moodle 3.3\n */\n/* global localStorage, sessionStorage, setTimeout*/\n/* eslint space-before-function-paren: 0 */\n\ndefine([\"jquery\", \"format_tiles/browser_storage_set_up\"], function ($, storageSetUp) {\n    \"use strict\";\n\n    var courseId;\n    var userId;\n\n    var localStorageKeyElements = {\n        prefix: \"mdl-tiles-\",\n        course: \"mdl-tiles-course-\",\n        lastSection: \"-lastSecId\",\n        content: \"-content\",\n        lastUpdated: \"-lastUpdated\",\n        collapseSecZero: \"-collapsesec0\",\n        user: \"-user-\",\n        section: \"-sec-\",\n        userChoicePrefix: \"mdl-tiles-userPrefStorage-\"\n    };\n\n    var MAX_SECTIONS_TO_STORE;\n    /**\n     * The last visited section number will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-lastSecId\n     * @returns {string} the key to use for this course\n     */\n    var encodeLastVistedSectionKeyName = function() {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.lastSection;\n    };\n\n    /**\n     The last visited section's content will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-content\n     * @param {number} sectionId the section Id we are interested in\n     * @returns {string} the key to use for this course section's content\n     */\n    var encodeContentKeyName = function(sectionId) {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.section + sectionId.toString()\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.content;\n    };\n\n    /**\n     * The last update time for the content for this section\n     * will be stored with a key in the format\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-lastUpdated\n     * @param {number} sectionId the section Id we are interested in\n     * @returns {string} the key to use for this course section's content update time\n     */\n    var encodeContentLastUpdatedKeyName = function(sectionId) {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.section + sectionId.toString()\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.lastUpdated;\n    };\n\n    /**\n     * Whether or not section zero is collapsed for this course/user\n     * will be stored with a key in this format\n     * @returns {string} the key to use\n     */\n    var collapseSecZeroKey = function() {\n        return localStorageKeyElements.course + courseId\n            + localStorageKeyElements.user + userId\n            + localStorageKeyElements.collapseSecZero;\n    };\n\n    /**\n     * Check if the current key name is a last updated content key or not\n     * The format used if this is true will be\n     * mdl-tiles-course-[courseid]-sec-[sectionid]-lastUpdated\n     * Check for this and return true if this key matches\n     * @param {string} key the key to check\n     * @returns {boolean} whether it matches or not\n     */\n    var isContentLastUpdatedKeyName = function(key) {\n        return key.indexOf(localStorageKeyElements.prefix) === 0\n            && key.substr(-localStorageKeyElements.lastUpdated.length) === localStorageKeyElements.lastUpdated;\n    };\n\n    /**\n     * Store HTML from a section (or the landing page if sectionId is zero) into session storage\n     * Considered using core/storagewrapper, core/sessionstorage and core/localstorage but they\n     * don't contain much so implemented directly\n     * @param {string} courseId\n     * @param {number} sectionId\n     * @param {String} html\n     */\n    var storeCourseContent = function (courseId, sectionId, html) {\n        if (sectionId === undefined || courseId === undefined) {\n            throw new Error(\"Missing section id\");\n        }\n        try {\n            if (html !== undefined && html !== \"\"\n                && storageSetUp.Enabled.session && storageSetUp.storageAllowed() === true) {\n                sessionStorage.setItem(encodeContentKeyName(sectionId), html);\n                sessionStorage.setItem(\n                    encodeContentLastUpdatedKeyName(sectionId),\n                    Math.round(Date.now() / 1000).toString()\n                );\n            } else {\n                // HTML is empty so remove from store if present.\n                sessionStorage.removeItem(encodeContentKeyName(sectionId));\n                sessionStorage.removeItem(encodeContentLastUpdatedKeyName(sectionId));\n            }\n        } catch (err) {\n            require([\"core/log\"], function(log) {\n                log.debug(err);\n            });\n        }\n    };\n\n    /**\n     * Decode a storage key in the format\n     * @param {string} key the text value of key e.g. mdl-tiles-course-3-sec-10-user-2-lastUpdated\n     * @return {object} json with key values\n     */\n    var decodeLastUpdatedKey = function (key) {\n        var splitKey = key.split(\"-\");\n        if (isContentLastUpdatedKeyName(key)) {\n            return {\n                courseId: parseInt(splitKey[splitKey.indexOf(\"course\") + 1]),\n                sectionId: parseInt(splitKey[splitKey.indexOf(\"sec\") + 1]),\n                userId: parseInt(splitKey[splitKey.indexOf(\"user\") + 1]),\n                title: \"lastUpdated\"\n            };\n        } else {\n            throw new Error(\"Invalid lastUpdated key\");\n        }\n    };\n\n    /**\n     * Clean up items in local storage and session storage\n     * For SESSION STORAGE, these will be course content HTML items or corresponding time records for them,\n     * so to ensure we don't get too many, on each course access, we delete them if they are older than the threshold\n     * This applies even if they relate to a different course to the one now being visited.\n     * For LOCAL STORAGE, items will be very small (no HTML) so we only clear them if the user has selected to\n     * clear browser storage. They include IDs of sections last visited in each course, whether section zero is collapsed etc\n     * @param {number} contentDeleteMins how many minutes old a stored content HTML item must be, before it is be deleted here\n     * @param {number} clearBrowserStorage if true, we are deleting all session and local storage on user command\n     * @param {number} maxNumberToKeep how many items of HTML can be kept in store in total (evict the rest)\n     */\n    var cleanUp = function (contentDeleteMins, clearBrowserStorage, maxNumberToKeep) {\n        // Clean localStorage first - only clear if we are clearing all browser storage.\n        // Otherwise leave it (used for last visited section IDs etc).\n        if (clearBrowserStorage) {\n            Object.keys(localStorage).filter(function (key) {\n                return key.indexOf(localStorageKeyElements.prefix) === 0\n                    && key.indexOf(localStorageKeyElements.userChoicePrefix) !== 0;\n            }).forEach(function (item) {\n                // Item does relate to this plugin.\n                // It is not the user's preference about whether to use storage or not (keep that).\n                localStorage.removeItem(item);\n            });\n\n            // Now clean sessionStorage (used for course content HTML).\n            Object.keys(sessionStorage).filter(function (key) {\n                // Filter to only keys relating to this plugin.\n                return key.indexOf(localStorageKeyElements.prefix) === 0;\n            }).forEach(function (itemKey) {\n                // Item does relate to this plugin.\n                if (isContentLastUpdatedKeyName(itemKey)) {\n                    var params = decodeLastUpdatedKey(itemKey);\n                    // Remove *all* items for this plugin regardless of age.\n                    storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty last arg will mean deletion.\n                }\n            });\n        } else {\n            // Remove *stale* items for this plugin.\n            var staleTime = Math.round(Date.now() / 1000) - contentDeleteMins * 60;\n            Object.keys(sessionStorage).filter(function (key) {\n                // Filter to only keys relating to this plugin.\n                return key.indexOf(localStorageKeyElements.prefix) === 0;\n            }).forEach(function (itemKey) {\n                if (isContentLastUpdatedKeyName(itemKey)) {\n                    var params = decodeLastUpdatedKey(itemKey);\n                    if (sessionStorage.getItem(itemKey) < staleTime\n                        || contentDeleteMins === 0) {\n                        // Item is stale - older than contentDeleteMins settings.\n                        // this key represents an item with a last update date older than the delete threshold.\n                        storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty last arg will mean deletion.\n                    }\n                }\n            });\n\n            // Now check if we still have too many items and if we do, remove the oldest.\n            var lastUpdateKeys = Object.keys(sessionStorage).filter(function (item) {\n                return isContentLastUpdatedKeyName(item);\n            });\n            if (lastUpdateKeys.length > maxNumberToKeep) {\n                // We don't need this step if clearing whole browser storage as it is already cleared above.\n                // get all the update times in order from newest to oldest.\n                var lastUpdateTimes = lastUpdateKeys.map(function (key) {\n                    return parseInt(sessionStorage[key]);\n                }).sort();\n                // Set a cut off time so that we only have maxNumberToKeep newer than the cut off.\n                var cutOffTime = lastUpdateTimes[lastUpdateTimes.length - maxNumberToKeep];\n                if (maxNumberToKeep === 0) {\n                    cutOffTime = Date.now();\n                }\n                var params;\n                // Remove course content for all items older than the cut off time.\n                lastUpdateKeys.filter(function (key) {\n                    return sessionStorage[key] < cutOffTime;\n                }).forEach(function (expiredKey) {\n                    params = decodeLastUpdatedKey(expiredKey);\n                    storeCourseContent(params.courseId, params.sectionId, \"\"); // Empty \"\" will remove item.\n                });\n            }\n        }\n    };\n\n    /**\n     * Clear all storage used by this plugin.\n     */\n    var clearAllStorage = function() {\n        cleanUp(0, 1, 1);\n    };\n\n    /**\n     * Set the last visited section for the user for this course\n     * Used to reload that section on next visit\n     * Data is just an integer for section if\n     * Uses local storage not session storage so that it persists\n     * @param {number} sectionNum the section number last visited\n     */\n    var setLastVisitedSection = function (sectionNum) {\n        if (sectionNum && storageSetUp.Enabled.local) {\n            localStorage.setItem(encodeLastVistedSectionKeyName(), sectionNum.toString());\n        } else {\n            localStorage.removeItem(encodeLastVistedSectionKeyName());\n        }\n    };\n\n    var Module = {\n\n        init: function (course, maxContentSectionsToStore, isEditing, sectionNum,\n                        storedContentDeleteMins, assumeDataStoreConsent, user) {\n            courseId = course.toString();\n            userId = user.toString();\n            MAX_SECTIONS_TO_STORE = parseInt(maxContentSectionsToStore);\n            storageSetUp.init(userId, assumeDataStoreConsent, clearAllStorage);\n\n            $(document).ready(function () {\n\n                if (storageSetUp.storageAllowed() !== true) {\n                    cleanUp(0, 1, 0);\n                }\n                if (isEditing) {\n                    // Teacher is editing now so not using JS nav but set their current section for when they stop editing.\n                    setLastVisitedSection(sectionNum);\n                    // Clear storage in case they just changed something.\n                    cleanUp(0, 1, 0);\n                    if (storageSetUp.Enabled.session) {\n                        storeCourseContent(courseId, sectionNum, \"\");\n                    }\n                    // If user switches to another role, clear any stored content so they only see new role's content.\n                    $('a.menu-action[data-title=\"switchroleto,moodle\"]').click(function() {\n                        cleanUp(0, 1, 0);\n                    });\n                } else {\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent.on(\"click\", \".tile\", function () {\n                        // Evict unused HTML content from session storage to reduce footprint (after a delay).\n                        setTimeout(function () {\n                            cleanUp(parseInt(storedContentDeleteMins), 0, MAX_SECTIONS_TO_STORE);\n                        }, 2000);\n                    });\n                }\n            });\n        },\n\n        storageEnabledSession: function () {\n            return storageSetUp.Enabled.session;\n        },\n        storageEnabledLocal: function () {\n            return storageSetUp.Enabled.local;\n        },\n        storagestorageSetUperence: function () {\n            return storageSetUp.storageAllowed();\n        },\n\n        /**\n         * Get the user's last visited section id for this course\n         * @return {string|null} the section ID or null if none stored\n         */\n        getLastVisitedSection: function () {\n            return storageSetUp.Enabled.local && localStorage.getItem(encodeLastVistedSectionKeyName());\n        },\n\n        /**\n         * Retrieve HTML from session storage for this section\n         * @param {number} courseId the id for this course\n         * @param {number} sectionId id for this section\n         * @return {String} the HTML\n         */\n        getCourseContent: function (courseId, sectionId) {\n            return sessionStorage.getItem(encodeContentKeyName(sectionId));\n        },\n\n        /**\n         * Check the age of any content we have stored for this course section\n         * @param {number} courseId\n         * @param {number} sectionId\n         * @return {number|boolean} the age in seconds if we have content or false if none\n         */\n        getStoredContentAge: function (courseId, sectionId) {\n            var storedTime = parseInt(\n                sessionStorage.getItem(\n                    encodeContentLastUpdatedKeyName(sectionId)\n                )\n            );\n            if (storedTime) {\n                return Math.round(Date.now() / 1000 - storedTime);\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * When user collapsed or expands section zero, record their choice in localStorage so\n         * that it can be applied next time they visit\n         * @param {string} status to be applied\n         */\n        setSecZeroCollapseStatus: function (status) {\n            if (storageSetUp.Enabled.local && storageSetUp.storageAllowed()) {\n                if (status === \"collapsed\") {\n                    localStorage.removeItem(collapseSecZeroKey());\n                } else {\n                    localStorage.setItem(collapseSecZeroKey(), \"1\");\n                }\n            }\n        },\n        /**\n         * Get the last status of section zero for the present course from localStorage\n         * @returns {boolean} whether collapsed or not\n         */\n        getSecZeroCollapseStatus: function () {\n            return !!localStorage.getItem(collapseSecZeroKey());\n        },\n\n        storeCourseContent: function (courseId, sectionId, html) {\n            // Return object (\"public\") access to the \"private\" method above.\n            storeCourseContent(courseId, sectionId, html);\n        },\n\n        cleanUpStorage: function () {\n            // Return object (\"public\") access to the \"private\" method above (used when teacher edits course settings).\n            clearAllStorage();\n        },\n\n        setLastVisitedSection: function (sectionNum) {\n            // Return object (\"public\") access to the \"private\" method above.\n            if (storageSetUp.storageAllowed()) {\n                setLastVisitedSection(sectionNum);\n            }\n        }\n    };\n\n    return Module;\n});"],"file":"browser_storage.min.js"}